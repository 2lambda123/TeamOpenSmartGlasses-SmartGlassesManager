# MediaPipe subgraph to calculate iris landmarks and eye contour landmarks for # a single eye. (GPU input, and inference is executed on GPU.)
#
# It is required that "iris_landmark.tflite" is available at
# "mediapipe/modules/iris_landmark/iris_landmark.tflite"
# path during execution.
#
# EXAMPLE:
#   node {
#     calculator: "FaceEmotionRecGpu"
#     input_stream: "IMAGE:image"
#     input_stream: "FACE_RECT:face_rect"
#     output_stream: "FACE_EMOTION:face_emotion"
#   }
#
#   FACE_EMOTION is a 1d array of floats. Output from the model encoded as:
#
#   ['Angry', 'Disgusted', 'Fearful', 'Happy', 'Sad', 'Surprised', 'Neutral']
#
#

type: "FaceEmotionRecGpu"

# GPU buffer. (GpuBuffer)
input_stream: "IMAGE:image"
# ROI (region of interest) within the given image where the face is located.
# (NormalizedRect)
input_stream: "FACE_RECT:face_rect"

output_stream: "FACE_EMOTION:face_emotion"

output_stream: "cropped_scaled_image"

node {
  calculator: "ImageCroppingCalculator"
  input_stream: "IMAGE_GPU:image"
  input_stream: "NORM_RECT:face_rect"
  output_stream: "IMAGE_GPU:cropped_image"

  options: {
    [mediapipe.ImageCroppingCalculatorOptions.ext] {
      border_mode: BORDER_REPLICATE
    }
  }
}

#scale down to the size needed for our model
node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE_GPU:cropped_image"
  output_stream: "IMAGE_GPU:cropped_scaled_image"
  options: {
    [mediapipe.ImageTransformationCalculatorOptions.ext] {
      output_width: 64
      output_height: 64
      scale_mode: FIT
    }
  }
}

node {
  calculator: "TfLiteConverterCalculator"
  input_stream: "IMAGE_GPU:cropped_scaled_image"
  output_stream: "TENSORS_GPU:image_tensor"
#output_stream: "TENSORS:face_emotion"
  options: {
    [mediapipe.TfLiteConverterCalculatorOptions.ext] {
      zero_center: false
    }
  }
}

# Runs a TensorFlow Lite model on GPU that takes an image tensor and outputs a
# vector of tensors representing, for instance, detection boxes/keypoints and
# scores.
node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS_GPU:image_tensor"
  output_stream: "TENSORS:output_tensors"
  options: {
    [mediapipe.TfLiteInferenceCalculatorOptions.ext] {
#model_path: "mediapipe/modules/facial_emotion_recognition/facial_emotion_rec_model_susantabiswas.tflite"
    model_path: "mediapipe/modules/facial_emotion_recognition/iris_landmark.tflite"
    }
  }
}

###Convert output to simple float vector
node {
   calculator: "TfLiteTensorsToFloatsCalculator"
  input_stream: "TENSORS:output_tensors"
  output_stream: "FLOATS:face_emotion"
}

